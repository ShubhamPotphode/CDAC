Section 1


snippet 1

public class InfiniteForLoop {
 public static void main(String[] args) {
 for (int i = 0; i < 10; i--) {
 System.out.println(i);
 }
 }
} 

-i will never reach to 10, therefore the infinte loop is there

-corrected code is below

public class InfiniteForLoop {
    public static void main(String[] args) {
        for (int i = 0; i < 10; i++) {
            System.out.println(i);
        }
    }
}

---------------------------------------------------------------------------------------
Snippet 2

public class IncorrectWhileCondition {
 public static void main(String[] args) {
 int count = 5;
 while (count = 0) {
 System.out.println(count);
 count--;
 }
 }
}

 = operator is used for assignment, and it returns an int, not a boolean. 
 
 corrected code is
 
 public class IncorrectWhileCondition {
    public static void main(String[] args) {
        int count = 5;
        while (count != 0) { 
            System.out.println(count);
            count--;
        }
    }
}
 
 
----------------------------------------------------------------------------------------------

Snippet 3

public class DoWhileIncorrectCondition {
 public static void main(String[] args) {
 int num = 0;
 do {
 System.out.println(num);
 num++;
 } while (num > 0); 
 }
}

thid code goes into infinite loop as condition is mention as num >0 which is always true.

corrected code

public class DoWhileIncorrectCondition {
    public static void main(String[] args) {
        int num = 0;
        do {
            System.out.println(num);
            num++;
        } while (num < 10); // Correct condition
    }
}
--------------------------------------------------------------------------------------------------------------------------------
snippet 4

public class OffByOneErrorForLoop {
 public static void main(String[] args) {
 for (int i = 1; i <= 10; i++) {
 System.out.println(i);
 }
 // Expected: 10 iterations with numbers 1 to 10
 // Actual: Prints numbers 1 to 10, but the task expected only 1 to 9
 }
} 

remove = sign from codition of for loop, as it is printing upto 10 iterations. 

corrected code

public class OffByOneErrorForLoop {
 public static void main(String[] args) {
 for (int i = 1; i < 10; i++) {
 System.out.println(i);
 }
 // Expected: 10 iterations with numbers 1 to 10
 // Actual: Prints numbers 1 to 10, but the task expected only 1 to 9
 }
} 

------------------------------------------------------------------------------------------------------

snippet 5

public class WrongInitializationForLoop {
 public static void main(String[] args) {
 for (int i = 10; i >= 0; i++) {
 System.out.println(i);
 }
 }
}

code output goes in infinite loop starting from 10, as i >= 0 this condition is given
which is always true in this code.

-------------------------------------------------------------------------------------------------

snippet 6

public class MisplacedForLoopBody {
 public static void main(String[] args) {
 for (int i = 0; i < 5; i++)
 System.out.println(i);
 System.out.println("Done");
 }
}

the statement System.out.println(i); is the only statement considered as part of the loop body because it is directly after the for statement.

the corrected code is

public class MisplacedForLoopBody {
 public static void main(String[] args) {
 for (int i = 0; i < 5; i++){
 System.out.println(i);
 System.out.println("Done");
 }
 }
}

----------------------------------------------------------------------------------------------------------------------------------------------

snippet 7

public class UninitializedWhileLoop {
 public static void main(String[] args) {
 int count; 
 while (count < 10) {
 System.out.println(count);
 count++;
 }
 }
}


in while loop condition (count < 10) condition is given but int count is just declared not defined therefore error is there.

corrected code is

public class UninitializedWhileLoop {
 public static void main(String[] args) {
 int count = 0;
 while (count < 10) {
 System.out.println(count);
 count++;
 }
 }
}

-------------------------------------------------------------------------------------------------

snippet 8

public class OffByOneDoWhileLoop {
 public static void main(String[] args) {
 int num = 1;
 do {
 System.out.println(num);
 num--;
 } while (num > 0);
 }
} 

as num= 1 is given and do while loop condition is num>0 so there is decrementing operator num-- so the 
value of num is decreasing in each iteration so, it will only prints 1 one time.

corrected code for print the
numbers from 1 to 5? 

public class OffByOneDoWhileLoop {
 public static void main(String[] args) {
 int num = 1;
 do {
 System.out.println(num);
 num++;
 } while (num <=5);
 }
} 

-------------------------------------------------------------------------------------------------------------

snippet 9

public class InfiniteForLoopUpdate {
 public static void main(String[] args) {
 for (int i = 0; i < 5; i += 2) {
 System.out.println(i);
 }
 }
} 

code gives output of 0 2 4 as the increamenting operator is i+=2.

corrected code is 

public class InfiniteForLoopUpdate {
 public static void main(String[] args) {
 for (int i = 0; i < 5; i++) {
 System.out.println(i);
 }
 }
} 

------------------------------------------------------------------------------------------------------------------------------------

snippet 10

public class IncorrectWhileLoopControl {
 public static void main(String[] args) {
 int num = 10;
 while (num = 10) {
 System.out.println(num);
 num--;
 }
 }
} 

 = operator is used for assignment, and it returns an int, not a boolean. 
 
 corrected code is
 
 public class IncorrectWhileLoopControl {
 public static void main(String[] args) {
 int num = 10;
 while (num ==10) {
 System.out.println(num);
 num--;
 }
 }
} 

-------------------------------------------------------------------------------------------------------------------

snippet 11

public class IncorrectLoopUpdate {
 public static void main(String[] args) {
 int i = 0;
 while (i < 5) {
 System.out.println(i);
 i += 2; // Error: This may cause unexpected results in output
 }
 }
} 

the output of this code will be 0 2 4 , if we set i++ then it will give desired result

corrected code is 

public class IncorrectLoopUpdate {
 public static void main(String[] args) {
 int i = 0;
 while (i < 5) {
 System.out.println(i);
 i ++; 
 
 }
 }
} 

--------------------------------------------------------------------------------------------------------------------------

snippet 12

public class LoopVariableScope {
 public static void main(String[] args) {
 for (int i = 0; i < 5; i++) {
 int x = i * 2;
 }
 System.out.println(x); // Error: 'x' is not accessible here
 }
}

Since x is declared inside the loop, it goes out of scope as soon as the loop iteration finishes. 
It cannot be referenced outside the loop.

correctec code is 

public class LoopVariableScope {
    public static void main(String[] args) {
        int x = 0; // Declare x outside the loop
        for (int i = 0; i < 5; i++) {
            x = i * 2;
        }
        System.out.println(x); // Now x is accessible here
    }
}

--------------------------------------------------------------------------------------------------------------



